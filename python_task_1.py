# -*- coding: utf-8 -*-
"""python_task_1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VuS7hJiQA7juHCmsqkHQnUqt8nsWINv9
"""

import pandas as pd
def generate_car_matrix():
  df=pd.read_csv('datasets/dataset-1.csv')
  result_df = df.pivot(index='id_1', columns='id_2', values= 'car').fillna(0).astype(int)
  result_df.values[[range(len(result_df))]*2]=0
  return result_df

import pandas as pd

def get_type_count(dataframe):
    # Add a new categorical column 'car_type'
    dataframe['car_type'] = pd.cut(dataframe['car'], bins=[-float('inf'), 15, 25, float('inf')],
                                   labels=['low', 'medium', 'high'], right=False)

     # Calculate the count of occurrences for each 'car_type' category
    type_counts = dataframe['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts

import pandas as pd

def get_bus_indexes(dataframe):
    # Calculate the mean value of the 'bus' column
    bus_mean = dataframe['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indexes = dataframe[dataframe['bus'] > 2 * bus_mean].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

import pandas as pd

def filter_routes(dataframe):
    # Filter rows where the average of 'truck' column is greater than 7
    filtered_data = dataframe.groupby('route')['truck'].mean().loc[lambda x: x > 7].index.tolist()

    # Sort the list of routes in ascending order
    filtered_data.sort()

    return filtered_data

import pandas as pd

def multiply_matrix(input_dataframe):
    # Copy the input DataFrame to avoid modifying the original
    modified_dataframe = input_dataframe.copy()

    # Apply the specified logic to modify values
    modified_dataframe = modified_dataframe.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round values to 1 decimal place
    modified_dataframe = modified_dataframe.round(1)

    return modified_dataframei

import pandas as pd

def check_timestamp_completeness(dataframe):
    # Assuming dataframe has columns id, id_2, startDay, startTime, endDay, endTime
    # Combine startDay and startTime, endDay and endTime to create datetime columns
    dataframe['start_datetime'] = pd.to_datetime(dataframe['startDay'] + ' ' + dataframe['startTime'])
    dataframe['end_datetime'] = pd.to_datetime(dataframe['endDay'] + ' ' + dataframe['endTime'])

    # Calculate the duration for each entry
    dataframe['duration'] = dataframe['end_datetime'] - dataframe['start_datetime']

    # Group by (id, id_2) and check if each pair covers a full 24-hour period and spans all 7 days of the week
    result = dataframe.groupby(['id', 'id_2']).apply(lambda group: all(
        group['duration'].sum() == pd.Timedelta(days=7) and
        group['start_datetime'].min().time() == pd.Timestamp('00:00:00').time() and
        group['end_datetime'].max().time() == pd.Timestamp('23:59:59').time()
    )).rename('timestamp_completeness')

    return result

# Example usage:
# Assuming dataset-2.csv is loaded into a pandas DataFrame called df
# result_series = check_timestamp_completeness(df)